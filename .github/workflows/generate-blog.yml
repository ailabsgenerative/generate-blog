# .github/workflows/generate-blog.yml
name: Generate Blog Post with Gemini (Flash Model)

on:
  schedule:
    - cron: '0 3 * * *' # 毎日 12:00 JST (UTC 3:00)
  workflow_dispatch: # 手動実行を可能にする

jobs:
  generate:
    runs-on: ubuntu-latest # 実行環境

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # リポジトリをチェックアウト

      - name: Set up Python
        uses: actions/setup-python@v5 # Python環境をセットアップ
        with:
          python-version: '3.10' # 使用するPythonのバージョン

      - name: Install requests library
        run: pip install -q requests # requestsライブラリをインストール

      - name: Generate post with Gemini API (Flash Model)
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }} # GitHub Secrets から API キーを読み込む
        run: |
          DATE=$(date +"%Y-%m-%d")
          TIME=$(date +"%H-%M")
          mkdir -p posts

          # Pythonスクリプトを実行してGemini APIを呼び出し、記事を生成
          python - <<EOF > posts/${DATE}-${TIME}.md
          import os
          import requests # requestsモジュールをインポート
          import datetime
          import sys
          import json # JSON操作のためにインポート

          # 環境変数からAPIキーを取得
          api_key = os.getenv('GOOGLE_API_KEY')
          if not api_key:
              print("Error: GOOGLE_API_KEY environment variable is not set.", file=sys.stderr)
              sys.exit(1)

          # Gemini API のエンドポイントとモデル
          # 今回は 'gemini-2.0-flash' を使用
          api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"

          # プロンプト
          prompt_text = "くすっと笑える小話を書いて。5分くらいで読めるものがいいな。"

          # リクエストボディ
          request_body = {
              "contents": [
                  {
                      "parts": [
                          {
                              "text": prompt_text
                          }
                      ]
                  }
              ]
          }

          try:
              print(f"Calling Gemini API (Flash Model) with prompt: '{prompt_text}'", file=sys.stderr)

              # HTTP POST リクエストの送信
              response = requests.post(api_url, headers={'Content-Type': 'application/json'}, json=request_body)
              response.raise_for_status() # HTTPエラーが発生した場合に例外を発生させる

              # レスポンスのJSONをパース
              response_data = response.json()

              # 生成されたテキストの抽出
              # レスポンス構造によってパスが異なる場合があります。
              # 以下のパスは一般的なGemini APIの構造です。
              generated_text = ""
              if 'candidates' in response_data and len(response_data['candidates']) > 0:
                  for part in response_data['candidates'][0]['content']['parts']:
                      if 'text' in part:
                          generated_text += part['text']
              else:
                  print("Error: No text generated or unexpected response structure.", file=sys.stderr)
                  # APIの安全設定によりコンテンツがブロックされた可能性もあります
                  if 'promptFeedback' in response_data and 'blockReason' in response_data['promptFeedback']:
                      print(f"Content blocked due to: {response_data['promptFeedback']['blockReason']}", file=sys.stderr)
                  sys.exit(1)


              # Markdownヘッダーの生成
              now = datetime.datetime.now()
              header_date = now.strftime("%Y-%m-%d")
              header_time = now.strftime("%H:%M")
              print(f"## {header_date} {header_time} の記事")
              print(generated_text.strip()) # 余分な空白を除去

          except requests.exceptions.RequestException as e:
              print(f"HTTP request error: {e}", file=sys.stderr)
              if e.response:
                  print(f"Response status: {e.response.status_code}", file=sys.stderr)
                  print(f"Response body: {e.response.text}", file=sys.stderr)
              sys.exit(1)
          except Exception as e:
              print(f"An unexpected error occurred: {e}", file=sys.stderr)
              sys.exit(1)
          EOF

      - name: Update index.html
        run: |
          echo "<html><body><h1>Blog</h1><ul>" > index.html
          for file in posts/*.md; do
            title=$(head -n 1 "$file" | sed 's/^## //')
            echo "<li><a href=\"$file\">$title</a></li>" >> index.html
          done
          echo "</ul></body></html>" >> index.html

      - name: Commit and Push
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Add new blog post $(date +'%Y-%m-%d %H:%M')" || echo "No changes to commit"
          git push origin HEAD